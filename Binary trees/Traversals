// 144. Preorder trvaersal
class Solution {
    List<Integer> list = new ArrayList<>();
    public void preorder(TreeNode curr){
        if(curr==null)return;//Base condition

        list.add(curr.val);//Process
        preorder(curr.left);//Recursive call
        preorder(curr.right);//recursive call
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        preorder(root);
        return list;
    }
}


//94. Inorder traversal
class Solution {
    List<Integer> list = new ArrayList<>();
    public void inorder(TreeNode curr){
        if(curr==null)return;//Base condition

        inorder(curr.left);//Recursive call
        list.add(curr.val);//Process
        inorder(curr.right);//recursive call
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        inorder(root);
        return list;   
    }
}


//145. Post order traversal
class Solution {
    List<Integer> list = new ArrayList<>();
    public void postorder(TreeNode root){
        if(root==null) return;
        postorder(root.left);
        postorder(root.right);
        list.add(root.val);
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        postorder(root);
        return list;
    }
}


//102. Level order traversal
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root!=null) q.add(root);
        while(!q.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode curr = q.poll();
                list.add(curr.val);
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            if(!list.isEmpty()){
                res.add(list);
            }
        }
        return res;
    }
}


