class Solution {
    int m,n;
    int[][] dir = {{-1,0},{1,0},{0,-1},{0,1}};
    public boolean exist(char[][] board, String word) {
        m = board.length;//rows
        n = board[0].length;//columns
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==word.charAt(0) && wordfound(board,i,j,word,0)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean wordfound(char[][] board, int i, int j, String word, int ptr){
        //Goal state
        if(ptr>=word.length()){
            return true;
        }
        //out of bound indes or exploration
        if(i<0 || i>m || j<0 || j>n || board[i][j]!=word.charAt(ptr)) return false;

        //Action
        char temp = board[i][j];
        board[i][j] = '.';

        //Exploration
        for(int[] directions: dir){
            int row = i+directions[0];
            int col = j+directions[1];
            
            if(wordfound(board,row,col,word,ptr+1)){
                return true;
            }
        }
        //Undo
        board[i][j] = temp;
        return false;
    }
}
